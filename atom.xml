<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wheaesong.github.io/</id>
    <title>Noir</title>
    <updated>2024-12-05T09:07:28.089Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wheaesong.github.io/"/>
    <link rel="self" href="https://wheaesong.github.io/atom.xml"/>
    <subtitle>好好睡，晚安</subtitle>
    <logo>https://wheaesong.github.io/images/avatar.png</logo>
    <icon>https://wheaesong.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, Noir</rights>
    <entry>
        <title type="html"><![CDATA[从 0-1 搭建高性能代理池]]></title>
        <id>https://wheaesong.github.io/post/ce-shi-wen-zhang/</id>
        <link href="https://wheaesong.github.io/post/ce-shi-wen-zhang/">
        </link>
        <updated>2024-05-22T09:02:56.000Z</updated>
        <content type="html"><![CDATA[<p>1、架构</p>
<p>​	其实代理池的架构说来说去也就那么几件事，可用性，稳定性。而稳定的代理源有很多渠道，包括付费等很多手段。也是第一次搭建，代理源的事情就不细说，主要讲一讲代理评分的标准。</p>
<p>在开始开发之前，到 github 上学习了很多优秀的开源代理软件，比如崔老师的 proxyPool，这个是很经典的源码了，在自己动手之前也一直用崔老师的开源，但可能是用的人并不少，个人感觉代理的质量并不高，至少就免费的来说，质量是不高的，响应比较慢，也会存在大量的无效 IP 。</p>
<p>一个代理池无非就几个东西，</p>
<ul>
<li>检测器，检测 IP 可用性的组件，我看了很多，大部分是通过 requests.get() 实现的检测的，衡量之后我并没有选择这个，因为 requests 是同步的，也就是说每个请求从打开到关闭，必须完全等到超时或者请求响应才结束，所以我觉得可能在检测效率上会有影响。</li>
<li>调度器，从已经清洗好的代理池选择可用的代理，同时也就包括代理评分逻辑的构建，包括加分、扣分、删除代理等等。</li>
<li>存储器，代理存储的地方，我这里选择的是 redis ，介于 redis 高效的相应。</li>
</ul>
<p>具体细节大致如下：</p>
<figure data-type="image" tabindex="1"><img src="https://img-wangyu.oss-accelerate.aliyuncs.com/img/image-20221229110036903.png" alt="image-20221229110036903" loading="lazy"></figure>
<p>抓取器并不单独运行，而是通过调度器调度。当调取器轮询时，发现池中代理数量小于阀值时候，就会启动抓取器，抓取器抓取代理，直接送入检测器，检测通过会进行入库。</p>
<p>如果是代理池中代理数量并不低于阀值，并不会取获取新的代理，而是对池中的代理进行评分刷新。在池中采用 redis 的 Zset 类型，键值分别为代理和分数。这既保证的代理的唯一性（不用另外构建去重逻辑），方便对代理的可用性进行量化。</p>
<p>这里的评分量化的逻辑比较简单，在入库时赋初始值为10，检测通过加一分，检测不通过减一分，低于0分删除，最高分为100，但这是可以控制的，如果对代理的稳定性需求比较高，可以适当调高这个最大值。</p>
<p>这里就贴一下 出入池的核心代码，代码比较简单，注释也写得比较清晰了。</p>
<pre><code class="language-python">#!/usr/bin/python3
# -*- coding: utf-8 -*-
# @Time    : 2022/12/14 10:46
# @Author  : Noir
# @FileName: redisCon.py
# @Software: PyCharm

# redis 连接池
import redis
from setting import *

PoolEmptyError = redis.exceptions.ConnectionError


class RedisClient(object):
    def __init__(self, host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD):
        &quot;&quot;&quot;
        初始化
        :param host: 地址
        :param port: 端口
        :param password: 密码
        &quot;&quot;&quot;
        self.redispool = redis.ConnectionPool(host=host, port=port, password=password, decode_responses=True)
        self.db = redis.Redis(connection_pool=self.redispool)

    def add(self, proxy, score=INITIAL_SCORE):
        &quot;&quot;&quot;
        添加代理，设置分数为最高
        :param proxy: 代理
        :param score: 分数
        :return: 添加结果
        &quot;&quot;&quot;
        if not self.db.zscore(REDIS_KEY, proxy):
            return self.db.zadd(REDIS_KEY, {proxy: score})

    # 清空代理池
    def flush(self):
        &quot;&quot;&quot;
        清空代理池
        :return: 清空结果
        &quot;&quot;&quot;
        return self.db.delete(REDIS_KEY)

    # 代理分数增加
    def increase(self, proxy):
        &quot;&quot;&quot;
        代理分数增加
        :param proxy: 代理
        :return: 增加后的分数
        &quot;&quot;&quot;
        score = self.db.zscore(REDIS_KEY, proxy)
        if score and score &lt; MAX_SCORE:
            print('代理', proxy, '当前分数', score, '加1')
            return self.db.zincrby(REDIS_KEY, 1, proxy)
        else:
            print('代理', proxy, '当前分数', score, '已达最大值')
            return self.db.zadd(REDIS_KEY, {proxy: MAX_SCORE})


    def random(self):
        &quot;&quot;&quot;
        随机获取有效代理，首先尝试获取最高分的一个代理，如果不存在，则按照排名获取一个，否则异常
        :return: 随机代理
        &quot;&quot;&quot;
        result = self.db.zrangebyscore(REDIS_KEY, MAX_SCORE, MAX_SCORE)
        if len(result):
            return result
        else:
            result = self.db.zrevrange(REDIS_KEY, 0, 100)
            if len(result):
                return result[0]
            else:
                raise PoolEmptyError

    def decrease(self, proxy):
        &quot;&quot;&quot;
        代理值减一分，小于最小值，则代理删除
        :param proxy: 代理
        :return: 修改后的代理分数
        &quot;&quot;&quot;
        score = self.db.zscore(REDIS_KEY, proxy)
        if score and score &gt; MIN_SCORE:
            print('代理', proxy, '当前分数', score, '减1')
            return self.db.zincrby(REDIS_KEY, -1, proxy)
        else:
            print('代理', proxy, '当前分数', score, '移除')
            return self.db.zrem(REDIS_KEY, proxy)

    def exists(self, proxy):
        &quot;&quot;&quot;
        判断是否存在
        :param proxy: 代理
        :return: 是否存在
        &quot;&quot;&quot;
        return not self.db.zscore(REDIS_KEY, proxy) == None

    def max(self, proxy):
        &quot;&quot;&quot;
        将代理设置为 MAX_SCORE
        :param
        :return: 设置结果
        &quot;&quot;&quot;
        print('代理', proxy, '可用，设置为', MAX_SCORE)
        return self.db.zadd(REDIS_KEY, {proxy: MAX_SCORE})

    # 获取代理数量
    def count(self):
        &quot;&quot;&quot;
        获取数量
        :return: 数量
        &quot;&quot;&quot;
        return self.db.zcard(REDIS_KEY)

    # 获取全部代理
    def all(self):
        &quot;&quot;&quot;
        获取全部代理
        :return: 全部代理列表
        &quot;&quot;&quot;
        return self.db.zrangebyscore(REDIS_KEY, MIN_SCORE, MAX_SCORE)

</code></pre>
<p>这个中几乎所有的方法都是对 redis.redis()对象的方法的封装，但确实是仅仅对redis已有方法的封装就几乎满足可我们的全部要求，这也是选择 redis 而非Mysql 的重要原因。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[461-图像翻转]]></title>
        <id>https://wheaesong.github.io/post/832-tuxiangfanzhuan/</id>
        <link href="https://wheaesong.github.io/post/832-tuxiangfanzhuan/">
        </link>
        <updated>2021-03-22T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h4 id="题目描述">题目描述：</h4>
<blockquote>
<p>给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。</p>
<p>水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。</p>
<p>反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。</p>
<p></p>
<p>示例 1：</p>
<p>输入：[[1,1,0],[1,0,1],[0,0,0]]<br>
输出：[[1,0,0],[0,1,0],[1,1,1]]<br>
解释：首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；<br>
然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]<br>
示例 2：</p>
<p>输入：[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]<br>
输出：[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]<br>
解释：首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；<br>
然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/flipping-an-image<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h4 id="解题思路">解题思路</h4>
<p>​	首先有个条件是知道的，输入的必定是一个方阵，虽然不一定用得到</p>
<p>他要求两次翻转，行反转无疑是最简单的，我只用取出每一行的值，然后倒序切片就完成了第一个步骤。</p>
<p>然后是图片反正，就是0 和 1 的互换，那我觉得效率最高的应该是二进制运算，有个前提我们知道任 1^1 的值是 0，而0^1 的值是为1，这样无疑是最高的效率</p>
<h4 id="代码实现">代码实现</h4>
<pre><code class="language-python">class Solution:
    def flipAndInvertImage(self, image: List[List[int]]) -&gt; List[List[int]]:
        result = []
        for item in image: 
            result.append(item[::-1])
        for item in result:
            for i in range(len(item)):
                item[i] = item[i] ^ 1
            
        return result
</code></pre>
<h4 id="知识点补充">知识点补充</h4>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;</td>
<td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>
<td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td>
</tr>
<tr>
<td>|</td>
<td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td>
<td>(a | b) 输出结果 61 ，二进制解释： 0011 1101</td>
</tr>
<tr>
<td>^</td>
<td>按位异或运算符：当两对应的二进位相异时，结果为1</td>
<td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>
</tr>
<tr>
<td>~</td>
<td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1</td>
<td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移动运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。</td>
<td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移动运算符：把&quot;&gt;&gt;&quot;左边的运算数的各二进位全部右移若干位，&quot;&gt;&gt;&quot;右边的数指定移动的位数</td>
<td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>
</tr>
</tbody>
</table>
<h4 id="运行结果">运行结果：</h4>
<h5 id="复杂度分析">复杂度分析：</h5>
<ul>
<li>时间复杂度、空间复杂度都是O（1）</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://img.imgdb.cn/item/6059f4c78322e6675c6689db.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://wheaesong.github.io/post/hello-gridea/</id>
        <link href="https://wheaesong.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>